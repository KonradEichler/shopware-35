<?xml version="1.0" encoding="utf-8"?>
<project name="Shopware" basedir="." default="build-nightly">

    <property name="builddir" location="${basedir}/../build" />
    <property name="logdir" location="${builddir}/logs" />
    <property name="sourcedir" location="${basedir}/engine/Shopware" />
    
    
    
    <target name="build" />
    
    <target name="build-nightly"
            depends="test-static" />

    <target name="clean" description="-> Deletes all temporary build artifacts">
        <delete dir="${builddir}" />
    </target>
    
    <target name="prepare" 
            depends="clean,
                     -load-properties,
                     -prepare-application-directories,
                     -prepare-application-config-file" 
            description="-> Creates the temporary build directory.">
        <mkdir dir="${builddir}" />
        <mkdir dir="${logdir}" />
        
        <!-- Create required application directories -->
    </target>
    
    <target name="-load-properties"
            depends="-load-properties-local-settings">
            
    	<property file="${basedir}/build.properties.default" />
    </target>
    
    <target name="-load-properties-local-settings"
            depends="-load-properties-test-local-settings"
            if="load-properties-test-local-settings">
            
        <property file="${basedir}/build.properties" />
    </target>
            
    
    <target name="-load-properties-test-local-settings">
        <available file="${basedir}/build.properties"
                   property="load-properties-test-local-settings" />
    </target>
    
    <target name="-prepare-application-directories">
        <mkdir dir="${basedir}/cache/database" />
        <mkdir dir="${basedir}/cache/templates" />
        <chmod dir="${basedir}/cache" includes="**" perm="777"/>

        
        <mkdir dir="${basedir}/files/552211cce724117c3178e3d22bec532ec" />
        <mkdir dir="${basedir}/files/cms" />
        <mkdir dir="${basedir}/files/documents" />
        <mkdir dir="${basedir}/files/downloads" />
        <chmod dir="${basedir}/files/" includes="**" perm="777"/>
        
        <mkdir dir="${basedir}/images/articles" />
        <mkdir dir="${basedir}/images/banner" />
        <mkdir dir="${basedir}/images/cms" />
        <mkdir dir="${basedir}/images/supplier" />
        <chmod dir="${basedir}/images/" includes="**" perm="777"/>
        
        <mkdir dir="${basedir}/uploads" />
        <chmod dir="${basedir}/uploads/" includes="**" perm="777"/>
        
        <chmod dir="${basedir}/engine/Shopware/Plugins/Community" includes="**" perm="777" />
        <chmod dir="${basedir}/engine/Shopware/Proxies" includes="**" perm="777" />
        <chmod dir="${basedir}/engine/Enlight/Vendor/mpdf/tmp" includes="**" perm="777" />
        <chmod dir="${basedir}/engine/Enlight/Vendor/mpdf/ttfontdata" includes="**" perm="777" />
    </target>
    
    <target name="-prepare-application-config-file">
        <copy file="${basedir}/config.php.template"
              tofile="${basedir}/config.php"
              overwrite="true">
			<filterset begintoken="@@" endtoken="@@">
				<filter token="hostname" value="${shopware.db.hostname}"/>
				<filter token="username" value="${shopware.db.username}"/>
				<filter token="password" value="${shopware.db.password}"/>
				<filter token="database" value="${shopware.db.database}"/>
			</filterset>
        </copy>
    </target>

    <target name="svn-update" 
            depends="prepare"
            description="-> Performs an update on the projects's sources">
        <exec executable="svn" failonerror="on">
            <arg value="up" />
            <arg value="${basedir}" />
        </exec>
    </target>
    
    <target name="test-static" 
            depends="svn-update"
            description="-> Performs all static tests against the project source">
        <parallel>
            <antcall target="-test-syntax" />
            <antcall target="-test-cpd" />
            <antcall target="-test-pmd" />
            <antcall target="-test-checkstyle" />
        </parallel>
    </target>
    
    <target name="-test-syntax">
        <apply executable="php" failonerror="on" output="${logdir}/syntax.log">
            <arg value="-l" />
            <fileset dir="${sourcedir}">
                <include name="**/*.php" />
                <exclude name="vendor/html2ps/**/*.*" />
                <exclude name="Enlight/Enlight/View/ViewJson.php" />
                <exclude name="connectors/api/convert/**/*.*" />
            </fileset>
        </apply>
    </target>
    
    <target name="-test-cpd">
        <exec executable="phpcpd" output="/dev/null" errorproperty="phpcpd-failed">
            <arg value="--log-pmd" />
            <arg value="${logdir}/cpd.xml" />
            <arg value="--exclude" />
            <arg value="engine/Enlight/Vendor" />
            <arg value="--exclude" />
            <arg value="engine/vendor" />
            <arg value="${sourcedir}" />
        </exec>
        
        <!--<fail if="phpcpd-failed">Es gab kopierten code</fail>-->
    </target>
    
    <target name="-test-pmd">
        <exec executable="phpmd">
            <arg value="${sourcedir}" />
            <arg value="xml" />
            <arg value="unusedcode,codesize" />
            <arg value="--reportfile" />
            <arg value="${logdir}/pmd.xml" />
            <arg value="--exclude" />
            <arg value="vendor,Enlight/Vendor" />
        </exec>
    </target>
    
    <target name="-test-checkstyle">
        <exec executable="phpcs">
            <arg value="--standard=Shopware" />
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${logdir}/checkstyle.xml" />
            <arg value="--ignore=Enlight/Vendor,Enlight/Enlight/Zend,vendor" />
            <arg value="${sourcedir}"/>
        </exec>
    </target>
</project>